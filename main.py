import asyncio
import logging
import os
import random

import google.generativeai as genai
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from gtts import gTTS

from config import BOT_TOKEN, GEMINI_API_KEY1

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = BOT_TOKEN
GENAI_API_KEY = GEMINI_API_KEY1

genai.configure(api_key=GENAI_API_KEY)

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏"), types.KeyboardButton(text="üîä –¢–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ")],
            [types.KeyboardButton(text="üìñ –°–ª–æ–≤–æ –¥–Ω—è"), types.KeyboardButton(text="üí¨ –ß–∞—Ç —Å –ò–ò")],
        ],
        resize_keyboard=True
    )


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}

user_history = {}

illegal_words = ["–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏", "–æ—Ä—É–∂–∏–µ", "–≤–∑–ª–æ–º", "—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º", "–ø–æ–¥–¥–µ–ª–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"]

# –°–ª–æ–≤–æ –¥–Ω—è
words_of_the_day = [
    ("–≠—Ñ–µ–º–µ—Ä–Ω—ã–π", "–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –Ω–µ–¥–æ–ª–≥–æ–≤–µ—á–Ω—ã–π.", "–ï–≥–æ —É—Å–ø–µ—Ö –æ–∫–∞–∑–∞–ª—Å—è —ç—Ñ–µ–º–µ—Ä–Ω—ã–º –∏ –±—ã—Å—Ç—Ä–æ —É–≥–∞—Å."),
    ("–õ–∞—Ç–µ–Ω—Ç–Ω—ã–π", "–°–∫—Ä—ã—Ç—ã–π, –Ω–µ—è–≤–Ω—ã–π.", "–£ –Ω–µ–≥–æ –±—ã–ª –ª–∞—Ç–µ–Ω—Ç–Ω—ã–π —Ç–∞–ª–∞–Ω—Ç –∫ —Ä–∏—Å–æ–≤–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—è–≤–∏–ª—Å—è –ø–æ–∑–∂–µ."),
    ("–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º", "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –≤–æ –≤—Å–µ–º.", "–ï—ë –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º –º–µ—à–∞–ª –µ–π –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤–æ–≤—Ä–µ–º—è."),
    ("–†–∏–≥–∏–¥–Ω–æ—Å—Ç—å", "–ñ–µ—Å—Ç–∫–æ—Å—Ç—å, –Ω–µ–≥–∏–±–∫–æ—Å—Ç—å –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∏–ª–∏ –º—ã—à–ª–µ–Ω–∏–∏.",
     "–†–∏–≥–∏–¥–Ω–æ—Å—Ç—å –µ–≥–æ –≤–∑–≥–ª—è–¥–æ–≤ –Ω–µ –ø–æ–∑–≤–æ–ª—è–ª–∞ –µ–º—É –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏."),
    ("–≠–π—Ñ–æ—Ä–∏—è", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∞–π–Ω–µ–π —Ä–∞–¥–æ—Å—Ç–∏ –∏ –≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏—è.", "–ü–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –æ–Ω –∏—Å–ø—ã—Ç—ã–≤–∞–ª –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é —ç–π—Ñ–æ—Ä–∏—é."),
    ("–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—è", "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ.",
     "–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –ø–æ–º–æ–≥–ª–∞ –Ω–∞–ª–∞–¥–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã."),
    ("–ö–æ–Ω–Ω–æ—Ç–∞—Ü–∏—è", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–º—ã—Å–ª –∏–ª–∏ –æ—Ç—Ç–µ–Ω–æ–∫ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞.", "–°–ª–æ–≤–æ '–¥–æ–º' –∏–º–µ–µ—Ç —Ç–µ–ø–ª—É—é –∏ —É—é—Ç–Ω—É—é –∫–æ–Ω–Ω–æ—Ç–∞—Ü–∏—é."),
    ("–î–∏—Å—Å–æ–Ω–∞–Ω—Å", "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ.", "–í –µ–≥–æ —Å–ª–æ–≤–∞—Ö –∏ –ø–æ—Å—Ç—É–ø–∫–∞—Ö –æ—â—É—â–∞–ª—Å—è —è–≤–Ω—ã–π –¥–∏—Å—Å–æ–Ω–∞–Ω—Å."),
    ("–§—Ä—É—Å—Ç—Ä–∞—Ü–∏—è", "–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ –∏–∑-–∑–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏.", "–ù–µ—É–¥–∞—á–∏ –≤—ã–∑—ã–≤–∞–ª–∏ —É –Ω–µ–≥–æ —Å–∏–ª—å–Ω—É—é —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—é."),
    ("–ò–Ω—Ç–µ–Ω—Ü–∏—è", "–ù–∞–º–µ—Ä–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–∞ –æ–±—ä–µ–∫—Ç.",
     "–ï–≥–æ –∏–Ω—Ç–µ–Ω—Ü–∏—è –±—ã–ª–∞ –æ—á–µ–≤–∏–¥–Ω–∞ ‚Äî –æ–Ω —Ö–æ—Ç–µ–ª –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞."),
    ("–≠—Å–∫–∞–ø–∏–∑–º", "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ —É–π—Ç–∏ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏.", "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥ —Å—Ç–∞–ª–æ –µ–≥–æ —Ñ–æ—Ä–º–æ–π —ç—Å–∫–∞–ø–∏–∑–º–∞."),
    ("–ê–ø—Ä–æ–±–∏—Ä–æ–≤–∞—Ç—å", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ, —É—Ç–≤–µ—Ä–¥–∏—Ç—å.", "–ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–ø—Ä–æ–±–∏—Ä–æ–≤–∞—Ç—å."),
    ("–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å", "–û—Å–æ–∑–Ω–∞–Ω–∏–µ —Å–≤–æ–µ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç–∏.", "–ö—Ä–∏–∑–∏—Å –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –∑–∞—Å—Ç–∞–≤–∏–ª –µ–≥–æ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–π —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏."),
    ("–°—É–±–ª–∏–º–∞—Ü–∏—è", "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ —Ä—É—Å–ª–æ.", "–û–Ω —Å—É–±–ª–∏–º–∏—Ä–æ–≤–∞–ª —Å–≤–æ—é –∞–≥—Ä–µ—Å—Å–∏—é –≤ —Å–ø–æ—Ä—Ç."),
    ("–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", "–û–±—É—Å–ª–æ–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏.",
     "–ï–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—ã–ª–æ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ—à–ª—ã–º –æ–ø—ã—Ç–æ–º."),
    ("–≠–∫–ª–µ–∫—Ç–∏–∫–∞", "–°–º–µ—à–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.",
     "–ò–Ω—Ç–µ—Ä—å–µ—Ä –µ–≥–æ –¥–æ–º–∞ –æ—Ç–ª–∏—á–∞–ª—Å—è —ç–∫–ª–µ–∫—Ç–∏–∫–æ–π ‚Äî –º–æ–¥–µ—Ä–Ω —Å–æ—Å–µ–¥—Å—Ç–≤–æ–≤–∞–ª —Å –∫–ª–∞—Å—Å–∏–∫–æ–π."),
    ("–†–µ—Ñ–ª–µ–∫—Å–∏—è", "–û—Å–º—ã—Å–ª–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –ø–æ—Å—Ç—É–ø–∫–æ–≤ –∏ –º—ã—Å–ª–µ–π.", "–ü–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–∏ –æ–Ω –ø–æ–≥—Ä—É–∑–∏–ª—Å—è –≤ –≥–ª—É–±–æ–∫—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é."),
    ("–ö–æ–Ω–≥—Ä—É—ç–Ω—Ç–Ω–æ—Å—Ç—å", "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–Ω–µ—à–Ω–∏–º –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è–º.",
     "–ï–≥–æ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—â—É—â–∞–ª–∞—Å—å –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ–Ω–≥—Ä—É—ç–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤ –∏ —ç–º–æ—Ü–∏–π."),
    ("–ì–µ–¥–æ–Ω–∏–∑–º", "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—é –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—é.",
     "–û–Ω –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–ª—Å—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –≥–µ–¥–æ–Ω–∏–∑–º–∞, –Ω–∞—Å–ª–∞–∂–¥–∞—è—Å—å –∫–∞–∂–¥—ã–º –º–æ–º–µ–Ω—Ç–æ–º."),
    ("–ê–º–æ—Ä—Ñ–Ω—ã–π", "–ë–µ—Å—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π, –Ω–µ –∏–º–µ—é—â–∏–π —á–µ—Ç–∫–∏—Ö –æ—á–µ—Ä—Ç–∞–Ω–∏–π.",
     "–ï–≥–æ –ø–æ–∑–∏—Ü–∏—è –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ –±—ã–ª–∞ –∞–º–æ—Ä—Ñ–Ω–æ–π –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π.")

]


@router.message(Command("start"))
async def cmd_start(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–µ–π, –æ–∑–≤—É—á—É —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–æ–±—â–∞—é—Å—å —Å –≤–∞–º–∏! \n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ.",
        reply_markup=main_keyboard()
    )


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏
@router.message(lambda message: message.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏")
async def start_spell_check(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏.")
    user_state[message.chat.id] = "spell_check"
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏:", reply_markup=types.ReplyKeyboardRemove())


@router.message(lambda message: user_state.get(message.chat.id) == "spell_check")
async def check_spelling(message: Message):
    user_text = message.text
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {user_text}")

    prompt = f"–ò—Å–ø—Ä–∞–≤—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–µ–∫—Å—Ç–µ: {user_text}"

    try:
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(prompt)
        corrected_text = response.text if response.text else "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞."

        logging.info(f"–û—Ç–≤–µ—Ç AI –¥–ª—è {message.chat.id}: {corrected_text}")

        if corrected_text.strip() == user_text.strip():
            await message.answer("‚úÖ –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=main_keyboard())
        else:
            await message.answer(f"üö® –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{corrected_text}", reply_markup=main_keyboard())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ {message.chat.id}: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_keyboard())

    user_state.pop(message.chat.id, None)


# –°–ª–æ–≤–æ –¥–Ω—è
@router.message(lambda message: message.text == "üìñ –°–ª–æ–≤–æ –¥–Ω—è")
async def send_word_of_the_day(message: Message):
    word, meaning, example = random.choice(words_of_the_day)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ª–æ–≤–æ –¥–Ω—è: {word}")
    await message.answer(f"üìå *{word}*\nüìñ {meaning}\nüìù {example}", parse_mode="Markdown", reply_markup=main_keyboard())


# –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
user_history = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ –≤—Ä–µ–º—è —á–∞—Ç–∞ —Å –ò–ò
def chat_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç")]],
        resize_keyboard=True
    )


# –ß–∞—Ç —Å –ò–ò (–≠–º–∏–ª—å –ë–µ—Ä–ª–∏–Ω–µ—Ä)
@router.message(lambda message: message.text == "üí¨ –ß–∞—Ç —Å –ò–ò")
async def start_chat(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –Ω–∞—á–∞–ª —á–∞—Ç —Å –ò–ò.")
    user_state[message.chat.id] = "chat_ai"
    user_history[message.chat.id] = []  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    await message.answer("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≠–º–∏–ª—å –ë–µ—Ä–ª–∏–Ω–µ—Ä, —Ç–≤–æ–π –¥—Ä—É–≥ –∏ —É—á–∏—Ç–µ–ª—å —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –û —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?",
                         reply_markup=chat_keyboard())


@router.message(lambda message: message.text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Ç")
async def stop_chat(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç —Å –ò–ò.")
    user_state.pop(message.chat.id, None)
    user_history.pop(message.chat.id, None)  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())


@router.message(lambda message: user_state.get(message.chat.id) == "chat_ai")
async def chat_with_ai(message: Message):
    user_input = message.text
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –ò–ò: {user_input}")

    if message.chat.id not in user_history:
        user_history[message.chat.id] = []  # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞
    if not all(ord(c) < 128 or '–∞' <= c.lower() <= '—è' for c in user_input):
        warning_text = "‚ö†Ô∏è –Ø –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å, –Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—é ‚Äì –ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"
    else:
        warning_text = ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if any(word in user_input.lower() for word in illegal_words):
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
        await message.answer("‚õî –Ø –Ω–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã. \n\n*Error 404: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*",
                             parse_mode="Markdown", reply_markup=main_keyboard())
        user_state.pop(message.chat.id, None)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history[message.chat.id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}")

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(user_history[message.chat.id]) > 10:
        user_history[message.chat.id] = user_history[message.chat.id][-10:]

    prompt = f"""
    –¢—ã ‚Äì –≠–º–∏–ª—å –ë–µ—Ä–ª–∏–Ω–µ—Ä, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≠–º–∏–ª—å. –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –¥—Ä—É–≥  
    """

    try:
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(prompt)

        if not response.text:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò.")

        ai_reply = response.text
        logging.info(f"–û—Ç–≤–µ—Ç –ò–ò –¥–ª—è {message.chat.id}: {ai_reply}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_history[message.chat.id].append(f"–≠–º–∏–ª—å: {ai_reply}")

        await message.answer(f"{warning_text}\n{ai_reply}", reply_markup=chat_keyboard())

    except ValueError:
        logging.warning(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –¥–ª—è {message.chat.id}.")
        await message.answer("‚ùå –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É.",
                             reply_markup=main_keyboard())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ —Å –ò–ò –¥–ª—è {message.chat.id}: {e}", exc_info=True)
        await message.answer("‚õî –Ø –Ω–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã.", reply_markup=main_keyboard())


# –¢–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ
@router.message(lambda message: message.text == "üîä –¢–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ")
async def start_text_to_speech(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ.")
    user_state[message.chat.id] = "text_to_speech"
    await message.answer("üé§ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å:", reply_markup=types.ReplyKeyboardRemove())


@router.message(lambda message: user_state.get(message.chat.id) == "text_to_speech")
async def text_to_speech(message: Message):
    try:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏: {message.text}")

        tts = gTTS(message.text, lang='ru')
        filename = f"audio_{message.chat.id}.mp3"
        tts.save(filename)

        audio_file = FSInputFile(filename)
        await bot.send_audio(message.chat.id, audio_file, title="–í–∞—à –∞—É–¥–∏–æ—Ñ–∞–π–ª", performer="Bot Voice")

        await message.answer("‚úÖ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ!", reply_markup=main_keyboard())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è {message.chat.id}: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.", reply_markup=main_keyboard())

    finally:
        if os.path.exists(filename):
            os.remove(filename)
        user_state.pop(message.chat.id, None)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
